// Generated by BUCKLESCRIPT VERSION 1.9.1, PLEASE EDIT WITH CARE
'use strict';

var Block       = require("bs-platform/lib/js/block.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Routes      = require("./routes.js");
var Actions     = require("./actions.js");
var Navigation  = require("./navigation.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var ReasonReact = require("reason-react/lib/js/src/reasonReact.js");

var component = ReasonReact.reducerComponent("AppRe");

function make() {
  var newrecord = component.slice();
  newrecord[/* render */9] = (function (self) {
      var partial_arg = Curry._1(self[/* reduce */3], Actions.pop);
      var partial_arg$1 = Curry._1(self[/* reduce */3], Actions.push);
      var eta = Curry._4(Routes.Navigator[/* make */17], self[/* state */4][/* screen */0], (function (param) {
              return Navigation.renderRoute(self, partial_arg$1, partial_arg, param);
            }), Navigation.headerTitle, Curry._1(self[/* reduce */3], Actions.pop));
      return ReasonReact.element(/* None */0, /* None */0, eta);
    });
  newrecord[/* initialState */10] = (function () {
      return /* record */[
              /* screen : :: */[
                /* Home */0,
                /* [] */0
              ],
              /* tasks : :: */[
                /* record */[
                  /* id */"blah",
                  /* title */"blah blah",
                  /* due */new Date(),
                  /* createdAt */new Date(),
                  /* updatedAt */new Date(),
                  /* points */5
                ],
                /* [] */0
              ]
            ];
    });
  newrecord[/* reducer */12] = (function (action, state) {
      if (action) {
        return /* Update */Block.__(0, [/* record */[
                    /* screen : :: */[
                      action[0],
                      state[/* screen */0]
                    ],
                    /* tasks */state[/* tasks */1]
                  ]]);
      } else {
        var match = state[/* screen */0];
        if (match) {
          var tail = match[1];
          if (tail) {
            return /* Update */Block.__(0, [/* record */[
                        /* screen */tail,
                        /* tasks */state[/* tasks */1]
                      ]]);
          } else {
            return /* NoUpdate */0;
          }
        } else {
          return Pervasives.failwith("stack empty");
        }
      }
    });
  return newrecord;
}

var $$default = ReasonReact.wrapReasonForJs(component, (function () {
        return make(/* () */0);
      }));

exports.component = component;
exports.make      = make;
exports.$$default = $$default;
exports.default   = $$default;
/* component Not a pure module */
