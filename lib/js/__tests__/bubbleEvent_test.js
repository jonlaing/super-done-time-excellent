// Generated by BUCKLESCRIPT VERSION 1.8.2, PLEASE EDIT WITH CARE
'use strict';

var Jest        = require("bs-jest/lib/js/src/jest.js");
var Curry       = require("bs-platform/lib/js/curry.js");
var Caml_int32  = require("bs-platform/lib/js/caml_int32.js");
var BubbleEvent = require("../re/bubbleEvent.js");

describe("BubbleEvent", (function () {
        var id = function (x) {
          return x;
        };
        var add = function (x, y) {
          return x + y | 0;
        };
        var multBy3 = function (x) {
          return Caml_int32.imul(x, 3);
        };
        Jest.test("make", (function () {
                var e = BubbleEvent.make(multBy3, id);
                var e2_001 = /* T */[id];
                var e2 = /* Event */[
                  multBy3,
                  e2_001
                ];
                return Jest.Expect[/* toEqual */11](e2)(Jest.Expect[/* expect */0](e));
              }));
        Jest.test("apply", (function () {
                var e = BubbleEvent.make(id, add);
                var e1 = BubbleEvent.apply(e, /* T */[1]);
                var e2 = BubbleEvent.apply(e1, /* T */[2]);
                return Jest.Expect[/* toBe */1](3)(Jest.Expect[/* expect */0](e2[1][0]));
              }));
        Jest.test("mApply", (function () {
                var e = BubbleEvent.make(id, add);
                var e1 = BubbleEvent.mApply(e, 1);
                var e2 = BubbleEvent.mApply(e1, 2);
                return Jest.Expect[/* toBe */1](3)(Jest.Expect[/* expect */0](e2[1][0]));
              }));
        Jest.test("bind", (function () {
                var e = BubbleEvent.make(id, add);
                var e1 = BubbleEvent.mApply(e, 1);
                var e2 = BubbleEvent.mApply(e1, 2);
                var res = BubbleEvent.bind(e2, multBy3);
                return Jest.Expect[/* toEqual */11](9)(Jest.Expect[/* expect */0](res));
              }));
        return Jest.test("popEvent", (function () {
                      var x = [0];
                      var setState = function () {
                        x[0] = 5;
                        return /* () */0;
                      };
                      var update = function (f, _) {
                        return Curry._1(f, /* () */0);
                      };
                      var e = BubbleEvent.make(update, setState);
                      BubbleEvent.popEvent(e);
                      return Jest.Expect[/* toEqual */11](5)(Jest.Expect[/* expect */0](x[0]));
                    }));
      }));

/*  Not a pure module */
